import math
import random


class AES:
    def __init__(self, input, input_key, block_length):
        parameters = {128:[4, 4, 10], 192:[6, 4, 12], 256:[8, 4, 14]}
        self.Nk = parameters.get(block_length)[0]
        self.Nb = parameters.get(block_length)[1]
        self.Nr = parameters.get(block_length)[2]
        self.state = self.fill_state(input)
        self.key = input_key
        self.key_matrix =  self.fill_key(input_key)
        self.key_schedule = []
        self.sBox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
        ]
        self.inv_sBox = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
        ]

    def pad(self, plaintext):
        padding_len = 16 - (len(plaintext) % 16)
        padding = bytes([padding_len] * padding_len)
        return plaintext + padding

    def unpad(self, plaintext):
        padding_len = plaintext[-1]
        assert padding_len > 0
        message, padding = plaintext[:-padding_len], plaintext[-padding_len:]
        assert all(p == padding_len for p in padding)
        return message

    def fill_key(self, array):
        return [[array[j+i*self.Nk] for j in range(self.Nk)] for i in range(4)]

    def fill_state(self, input_array):
        return [[input_array[i+j*self.Nb] for j in range(self.Nb)] for i in range(4)]

    def transpose_key(self, arr):
        return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]

    def add_round_key(self, arr, rk):
        rk = self.transpose_key(rk)
        temp = [0]*self.Nb
        for i in range(self.Nb):
            temp[i] = self.bins_xor(arr[i], rk[i])
        return  temp

    def sub_bytes(self, array):
        return [[self.sBox[i] for i in row] for row in array]

    def shift(self, array, pos):
        for i in range(pos):
            array.append(array.pop(0))
        return array

    def shift_rows(self, arr):
        temp = [[0]*4]*self.Nb
        for i in range(self.Nb):
            temp[i] = self.shift(arr[i], i)
        return temp

    def inv_shift(self, array, pos):
        for i in range(len(array) - pos):
            array.append(array.pop(0))
        return array

    def inv_shift_rows(self, arr):
        for i in range(self.Nb):
            self.inv_shift(arr[i], i)
        return arr

    # def multiply(self, el, fix):
    #     if fix == 0x01:
    #         return el
    #     temp = (el << 1) & 0xff
    #     if fix == 0x02:
    #         return temp if el < 128 else temp ^ 0x1b
    #     if fix == 0x03:
    #         return self.multiply(el, 0x02) ^ el

    def xtime(self, x):
        return (x << 1) ^ (((x >> 7) & 0x01) * 0x1b) #0x1b = 00011011

    def multiply(self, x, y):
        result = (y & 0x01) * x
        result ^= (y >> 1 & 0x01) * self.xtime(x)
        result ^= (y >> 2 & 0x01) * self.xtime(self.xtime(x))
        result ^= (y >> 3 & 0x01) * self.xtime(self.xtime(self.xtime(x)))
        result ^= (y >> 4 & 0x01) * self.xtime(self.xtime(self.xtime(self.xtime(x))))
        return result & 0xff

    def mix_column(self, col):
        res = []
        res.append(self.multiply(col[0], 0x02) ^ self.multiply(col[1], 0x03) ^ self.multiply(col[2], 0x01) ^ self.multiply(col[3], 0x01))
        res.append(self.multiply(col[0], 0x01) ^ self.multiply(col[1], 0x02) ^ self.multiply(col[2], 0x03) ^ self.multiply(col[3], 0x01))
        res.append(self.multiply(col[0], 0x01) ^ self.multiply(col[1], 0x01) ^ self.multiply(col[2], 0x02) ^ self.multiply(col[3], 0x03))
        res.append(self.multiply(col[0], 0x03) ^ self.multiply(col[1], 0x01) ^ self.multiply(col[2], 0x01) ^ self.multiply(col[3], 0x02))
        return res

    def inv_mix_column(self, col):
        res = []
        res.append(self.multiply(col[0], 0x0e) ^ self.multiply(col[1], 0x0b) ^ self.multiply(col[2], 0x0d) ^ self.multiply(col[3], 0x09))
        res.append(self.multiply(col[0], 0x09) ^ self.multiply(col[1], 0x0e) ^ self.multiply(col[2], 0x0b) ^ self.multiply(col[3], 0x0d))
        res.append(self.multiply(col[0], 0x0d) ^ self.multiply(col[1], 0x09) ^ self.multiply(col[2], 0x0e) ^ self.multiply(col[3], 0x0b))
        res.append(self.multiply(col[0], 0x0b) ^ self.multiply(col[1], 0x0d) ^ self.multiply(col[2], 0x09) ^ self.multiply(col[3], 0x0e))
        return res

    def mix_columns(self, arr):
        temp = arr.copy()
        temp = [[temp[j][i] for j in range(len(temp))] for i in range(len(temp[0]))]
        result = arr.copy()
        for i in range(len(arr)):
            result[i] = self.mix_column(temp[i])
        result = [[result[j][i] for j in range(len(result))] for i in range(len(result[0]))]
        return result

    def unmix_columns(self, arr):
        temp = arr.copy()
        temp = [[temp[j][i] for j in range(len(temp))] for i in range(len(temp[0]))]
        result = arr.copy()
        for i in range(len(arr)):
            result[i] = self.inv_mix_column(temp[i])
        result = [[result[j][i] for j in range(len(result))] for i in range(len(result[0]))]
        return result

    def inv_sub_bytes(self, array):
        return [[self.inv_sBox[i] for i in row] for row in array]

    def sub_word(self, word):
        return [self.sBox[i] for i in word]

    def rot_word(self, word):
        word.append(word.pop(0))
        return word

    def bins_xor(self, word1, word2):
        arr = [word1[i]^word2[i] for i in range(4)]
        return arr

    def xor_rcon(self, temp, r0):
        rc = r0
        return [temp[0]^rc] +temp[1:]

    def create_round_keys(self):
        Rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
        0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
        0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39]
        w = [[0]*4]*(self.Nb*(self.Nr+1))
        i = 0
        while (i < self.Nk):
            w[i] = [self.key[4*i], self.key[4*i+1],self.key[4*i+2], self.key[4*i+3]]
            i = i + 1
        i = self.Nk
        while (i < self.Nb * (self.Nr + 1)):
            temp = w[i - 1].copy()
            if (i % self.Nk == 0):
                temp = self.rot_word(temp)
                temp = self.sub_word(temp)
                temp = self.xor_rcon(temp, Rcon[math.floor(i / self.Nk)])
            elif (self.Nk > 6 and i%self.Nk == 4):
                temp = self.sub_word(temp)
            w[i] = self.bins_xor(w[i - self.Nk], temp)
            i = i + 1
        return w

    def encrypt(self):
        self.key_schedule = self.create_round_keys()
        temp = self.state.copy()
        temp = self.add_round_key(temp, self.key_schedule[:self.Nb])
        for r in range(1, self.Nr):
            temp = self.sub_bytes(temp)
            temp = self.shift_rows(temp)
            temp = self.mix_columns(temp)
            temp = self.add_round_key(temp, self.key_schedule[r*self.Nb:(r+1)*self.Nb])
        temp = self.sub_bytes(temp)
        temp = self.shift_rows(temp)
        temp = self.add_round_key(temp, self.key_schedule[self.Nr*self.Nb:(self.Nr+1)*self.Nb])
        return temp

    def decrypt(self, ct):
        temp = ct
        temp = self.add_round_key(temp, self.key_schedule[self.Nr*self.Nb:(self.Nr+1)*self.Nb])
        for r in range(self.Nr-1, 0, -1):
            temp = self.inv_shift_rows(temp)
            temp = self.inv_sub_bytes(temp)
            temp = self.add_round_key(temp, self.key_schedule[r*self.Nb:(r + 1)*(self.Nb)])
            temp = self.unmix_columns(temp)
        temp = self.inv_sub_bytes(temp)
        temp = self.inv_shift_rows(temp)
        temp = self.add_round_key(temp, self.key_schedule[:self.Nb])
        return temp

    def show(self, arr):
        array = [[hex(arr[j][i]) for j in range(len(arr))] for i in range(len(arr[0]))]
        res = [item for sublist in array for item in sublist]
        print(" ".join(map(str, res)))

def change_state(state):
    rn = random.randint(0, len(state)-1)
    state[rn] = random.getrandbits(8)
    return state

def change_bit_state(blocklen):
    counter = 0
    for i in range(1000):
        state = [random.getrandbits(8) for i in range(16)]
        key = [random.getrandbits(8) for i in range(blocklen//8)]
        ct = AES(state, key, blocklen).encrypt()
        temp = state.copy()
        state2 = change_state(temp)
        ct2 = AES(state2, key, blocklen).encrypt()
        xor_array = [[ct[j][i]^ct2[j][i] for i in range(4)] for j in range(4)]
        zero_values = sum(x.count(0) for x in xor_array)
        counter += len(xor_array[0])*len(xor_array) - zero_values
    return counter/1000

def change_key(key):
    rn = random.randint(0, len(key) - 1)
    key[rn] = random.getrandbits(8)
    return key

def change_bit_key(blocklen):
    counter = 0
    for i in range(1000):
        state = [random.getrandbits(8) for i in range(16)]
        key = [random.getrandbits(8) for i in range(blocklen // 8)]
        ct = AES(state, key, blocklen).encrypt()
        key2 = change_key(key)
        ct2 = AES(state, key2, blocklen).encrypt()
        xor_array = [[ct[j][i] ^ ct2[j][i] for i in range(4)] for j in range(4)]
        zero_values = sum(x.count(0) for x in xor_array)
        counter += len(xor_array[0]) * len(xor_array) - zero_values
    return counter//1000

def get_means():
    print("mean for 128, state changed:", change_bit_state(128))
    print("mean for 192, state changed:", change_bit_state(192))
    print("mean for 256, state changed:", change_bit_state(256))
    print("mean for 128, key changed:", change_bit_key(128))
    print("mean for 192, key changed:", change_bit_key(192))
    print("mean for 256, key changed:", change_bit_key(256))

state = [0x54, 0x77, 0x6f, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x4e, 0x69, 0x6e, 0x65, 0x20, 0x54, 0x77, 0x6f]
key = [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20, 0x46, 0x75]
aes128 = AES(state, key, 128)
ct128 = aes128.encrypt()
print("AES-128 encrypted:")
aes128.show(ct128)
pt128 = aes128.decrypt(ct128)
print("AES-128 decrypted:")
aes128.show(pt128)

aes192 = AES([0x54, 0x77, 0x6f, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x4e, 0x69, 0x6e, 0x65, 0x20, 0x54, 0x77, 0x6f],
          [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20, 0x46, 0x75,
           0x54, 0x68, 0x61, 0x74, 0x54, 0x68, 0x61, 0x74], 192)
ct192 = aes192.encrypt()
print("AES-192 encrypted:")
aes192.show(ct192)
pt192 = aes192.decrypt(ct192)
print("AES-192 decrypted:")
aes192.show(pt192)

aes256 = AES([0x54, 0x77, 0x6f, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x4e, 0x69, 0x6e, 0x65, 0x20, 0x54, 0x77, 0x6f],
          [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79, 0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20, 0x46, 0x75,
           0x54, 0x68, 0x61, 0x74, 0x54, 0x68, 0x61, 0x74, 0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79], 256)
ct256 = aes256.encrypt()
print("AES-256 encrypted:")
aes256.show(ct256)
pt256 = aes256.decrypt(ct256)
print("AES-256 decrypted:")
aes256.show(pt256)

get_means()

